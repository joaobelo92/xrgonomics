# Similar to Tolani paper.

elbow_pos_t = np.array([elbow_pos[0], elbow_pos[2], -elbow_pos[1]])
end_effector_t = np.array([end_effector[0], end_effector[2], -end_effector[1]])
print(end_effector_t)

theta1_t = math.atan2(elbow_pos_t[0], -elbow_pos_t[1])
a1 = linalg_helpers.rotation_matrix(None, None, theta1_t)
s2 = -elbow_pos_t[1]/(a1[0][0]*arm_proper_length)
theta2_t = math.atan2(s2, elbow_pos_t[2]/arm_proper_length)
a2 = linalg_helpers.rotation_matrix(theta2_t, None, None)
theta3_t = math.atan2(-a1[1][0]*a2[1][1]*end_effector_t[0] + a1[0][0]*a2[1][1]*end_effector_t[1] +
                      a2[2][1]*end_effector_t[2], a1[0][0]*end_effector_t[0] + a1[1][0]*end_effector_t[1])

theta4_t = linalg_helpers.law_of_cosines_angle(arm_proper_length, forearm_hand_length,
                                                    linalg_helpers.magnitude(end_effector))

a3 = linalg_helpers.rotation_matrix(None, None, theta3_t)
t1 = np.array([[1, 0, 0, 0],
               [0, 1, 0, 0],
               [0, 0, 1, arm_proper_length],
               [0, 0, 0, 1]])

a4 = linalg_helpers.rotation_matrix(None, None, theta4_t)

t2 = np.array([[1, 0, 0, 0],
               [0, 1, 0, 0],
               [0, 0, 1, forearm_hand_length],
               [0, 0, 0, 1]])

elbow = (a1 @ a2 @ a3 @ t1)[0:3, 3]
res = elbow + (a1 @ a2 @ a3 @ t1 @ a4 @ t2)[0:3, 3]
print('r', linalg_helpers.magnitude(elbow_pos), elbow_pos, elbow, res, math.degrees(theta1_t), math.degrees(theta2_t), math.degrees(theta3_t), math.degrees(theta4_t))





        # print(linalg_helpers.normalize(point), -math.degrees(math.asin(linalg_helpers.normalize(point)[2])))
        # elv_angle_forward = a1[0:3, 0]

        # print(elv_angle_forward,
        #       linalg_helpers.euler_rodrigues_rotation(elv_angle_forward, math.degrees(-shoulder_elv), np.array([1, 0, 0]).T))

        # humerus_forward = linalg_helpers.euler_rodrigues_rotation(elv_angle_forward, math.degrees(-shoulder_elv), np.array([1, 0, 0]).T)

        # shoulder_rot = -math.degrees(linalg_helpers.angle_between_vectors(humerus_forward, forearm_forward))
        # print(shoulder_rot)
        # print(forearm_forward, humerus_forward)
        # print(math.degrees(math.atan2(forearm_forward[1] - humerus_forward[1])))
        # shoulder_rot = 0

        # print(elbow_pos, math.degrees(elv_angle), math.degrees(shoulder_elv))

        # test if elbow pos checks out with elbow IK
        # np.testing.assert_allclose(elbow_pos, (a1 @ a2 @ t1)[0:3, 3], atol=1e-07)

        # x_axis_elbow = (a1 @ a2 @ np.array([1, 0, 0, 1]).T)[0:3]

        # print(elbow_hand_unit, x_axis_elbow)
        # shoulder_rot = math.asin(elbow_hand_unit[0]) - math.asin(x_axis_elbow[0])
        # shoulder_rot = -math.degrees(shoulder_rot)
        # print('shou
        # der rot:', math.asin(x_axis_elbow[1]), math.asin(elbow_hand_unit[1]))
        # shoulder_rot = -math.degrees(linalg_helpers.angle_between_vectors(x_axis_elbow_unit, elbow_hand_unit))

        # a3 = linalg_helpers.rotation_matrix(None, shoulder_rot, None)
        # # print(x_axis_elbow, elbow_hand_unit)
        # elbow = (a1 @ a2 @ a3 @ t1)[0:3, 3]
        #
        # end_effector_ik = (a1 @ a2 @ a3 @ t1 @ a4 @ np.array([0, -forearm_hand_length, 0, 1]).T)[0:3]

        # @a4 @np.array([0, -forearm_hand_length, 0, 1]).T

        # shoulder_rot = 0
        # compute_base_shoulder_rot(elv_angle, shoulder_elv)

        a1 = linalg_helpers.rotation_matrix(None, elv_angle, None)
        a2 = linalg_helpers.rotation_matrix(shoulder_elv, None, None)

        # a4 = linalg_helpers.rotation_matrix(None, None, math.radians(90))
        # t1 = np.array([[1, 0, 0, 0],
        #                [0, 1, 0, -arm_proper_length],
        #                [0, 0, 1, 0],
        #                [0, 0, 0, 1]])

        t1 = np.array([[1, 0, 0, 0],
                       [0, 1, 0, -1],
                       [0, 0, 1, 0],
                       [0, 0, 0, 1]])

        # forearm_forward = linalg_helpers.normalize(end_effector - elbow_pos)
        # shoulder_rot_x_axis = compute_base_shoulder_rot(elv_angle, shoulder_elv)
        # r = forearm_forward - shoulder_rot_x_axis
        # print(forearm_forward, shoulder_rot_x_axis)
        # print(math.degrees(math.atan2()))